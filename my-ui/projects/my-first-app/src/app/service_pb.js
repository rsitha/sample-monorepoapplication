// source: service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var pwnhealth_pb = require('./pwnhealth_pb.js');
goog.object.extend(proto, pwnhealth_pb);
var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
goog.exportSymbol('proto.clinical.results.service.ActionRequest', null, global);
goog.exportSymbol('proto.clinical.results.service.ActionResponse', null, global);
goog.exportSymbol('proto.clinical.results.service.ApprovalStatus', null, global);
goog.exportSymbol('proto.clinical.results.service.Assay', null, global);
goog.exportSymbol('proto.clinical.results.service.CommentRequest', null, global);
goog.exportSymbol('proto.clinical.results.service.CommentResponse', null, global);
goog.exportSymbol('proto.clinical.results.service.Device', null, global);
goog.exportSymbol('proto.clinical.results.service.ErrorCode', null, global);
goog.exportSymbol('proto.clinical.results.service.FetchResultsRequest', null, global);
goog.exportSymbol('proto.clinical.results.service.FetchResultsRequest.OrderByExpression', null, global);
goog.exportSymbol('proto.clinical.results.service.FetchResultsRequest.OrderableField', null, global);
goog.exportSymbol('proto.clinical.results.service.FetchResultsResponse', null, global);
goog.exportSymbol('proto.clinical.results.service.GetResultRequest', null, global);
goog.exportSymbol('proto.clinical.results.service.GetResultResponse', null, global);
goog.exportSymbol('proto.clinical.results.service.PostResultsRequest', null, global);
goog.exportSymbol('proto.clinical.results.service.PostResultsRequest.Sample', null, global);
goog.exportSymbol('proto.clinical.results.service.PostResultsResponse', null, global);
goog.exportSymbol('proto.clinical.results.service.PostResultsResponse.Error', null, global);
goog.exportSymbol('proto.clinical.results.service.ResubmitAmendedRequest', null, global);
goog.exportSymbol('proto.clinical.results.service.ResubmitAmendedResponse', null, global);
goog.exportSymbol('proto.clinical.results.service.ResubmitRequest', null, global);
goog.exportSymbol('proto.clinical.results.service.ResubmitResponse', null, global);
goog.exportSymbol('proto.clinical.results.service.Result', null, global);
goog.exportSymbol('proto.clinical.results.service.Result.Error', null, global);
goog.exportSymbol('proto.clinical.results.service.Result.Submission', null, global);
goog.exportSymbol('proto.clinical.results.service.RetrySubmissionsRequest', null, global);
goog.exportSymbol('proto.clinical.results.service.RetrySubmissionsResponse', null, global);
goog.exportSymbol('proto.clinical.results.service.SetApprovalStatusRequest', null, global);
goog.exportSymbol('proto.clinical.results.service.SetApprovalStatusResponse', null, global);
goog.exportSymbol('proto.clinical.results.service.SetSubmissionStatusRequest', null, global);
goog.exportSymbol('proto.clinical.results.service.SetSubmissionStatusResponse', null, global);
goog.exportSymbol('proto.clinical.results.service.Stamp', null, global);
goog.exportSymbol('proto.clinical.results.service.SubmissionStatus', null, global);
goog.exportSymbol('proto.clinical.results.service.SubmitRequest', null, global);
goog.exportSymbol('proto.clinical.results.service.SubmitResponse', null, global);
goog.exportSymbol('proto.clinical.results.service.TestResult', null, global);
goog.exportSymbol('proto.clinical.results.service.TestValidity', null, global);
goog.exportSymbol('proto.clinical.results.service.WriteReportPdfRequest', null, global);
goog.exportSymbol('proto.clinical.results.service.WriteReportPdfResponse', null, global);
goog.exportSymbol('proto.clinical.results.service.dbField', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.FetchResultsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.FetchResultsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.FetchResultsRequest.displayName = 'proto.clinical.results.service.FetchResultsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.FetchResultsRequest.OrderByExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.FetchResultsRequest.OrderByExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.FetchResultsRequest.OrderByExpression.displayName = 'proto.clinical.results.service.FetchResultsRequest.OrderByExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.FetchResultsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clinical.results.service.FetchResultsResponse.repeatedFields_, null);
};
goog.inherits(proto.clinical.results.service.FetchResultsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.FetchResultsResponse.displayName = 'proto.clinical.results.service.FetchResultsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clinical.results.service.Result.repeatedFields_, null);
};
goog.inherits(proto.clinical.results.service.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.Result.displayName = 'proto.clinical.results.service.Result';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.Result.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.Result.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.Result.Error.displayName = 'proto.clinical.results.service.Result.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.Result.Submission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.Result.Submission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.Result.Submission.displayName = 'proto.clinical.results.service.Result.Submission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.SetApprovalStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.SetApprovalStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.SetApprovalStatusRequest.displayName = 'proto.clinical.results.service.SetApprovalStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.SetApprovalStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.SetApprovalStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.SetApprovalStatusResponse.displayName = 'proto.clinical.results.service.SetApprovalStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.CommentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.CommentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.CommentRequest.displayName = 'proto.clinical.results.service.CommentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.CommentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.CommentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.CommentResponse.displayName = 'proto.clinical.results.service.CommentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.GetResultRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.GetResultRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.GetResultRequest.displayName = 'proto.clinical.results.service.GetResultRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.GetResultResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.GetResultResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.GetResultResponse.displayName = 'proto.clinical.results.service.GetResultResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.ActionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clinical.results.service.ActionRequest.repeatedFields_, null);
};
goog.inherits(proto.clinical.results.service.ActionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.ActionRequest.displayName = 'proto.clinical.results.service.ActionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.ActionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clinical.results.service.ActionResponse.repeatedFields_, null);
};
goog.inherits(proto.clinical.results.service.ActionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.ActionResponse.displayName = 'proto.clinical.results.service.ActionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.ResubmitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.ResubmitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.ResubmitRequest.displayName = 'proto.clinical.results.service.ResubmitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.ResubmitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.ResubmitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.ResubmitResponse.displayName = 'proto.clinical.results.service.ResubmitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.PostResultsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clinical.results.service.PostResultsRequest.repeatedFields_, null);
};
goog.inherits(proto.clinical.results.service.PostResultsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.PostResultsRequest.displayName = 'proto.clinical.results.service.PostResultsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.PostResultsRequest.Sample = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.PostResultsRequest.Sample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.PostResultsRequest.Sample.displayName = 'proto.clinical.results.service.PostResultsRequest.Sample';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.PostResultsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clinical.results.service.PostResultsResponse.repeatedFields_, null);
};
goog.inherits(proto.clinical.results.service.PostResultsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.PostResultsResponse.displayName = 'proto.clinical.results.service.PostResultsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.PostResultsResponse.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.PostResultsResponse.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.PostResultsResponse.Error.displayName = 'proto.clinical.results.service.PostResultsResponse.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.SubmitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.SubmitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.SubmitRequest.displayName = 'proto.clinical.results.service.SubmitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.SubmitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.SubmitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.SubmitResponse.displayName = 'proto.clinical.results.service.SubmitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.RetrySubmissionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clinical.results.service.RetrySubmissionsRequest.repeatedFields_, null);
};
goog.inherits(proto.clinical.results.service.RetrySubmissionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.RetrySubmissionsRequest.displayName = 'proto.clinical.results.service.RetrySubmissionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.RetrySubmissionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clinical.results.service.RetrySubmissionsResponse.repeatedFields_, null);
};
goog.inherits(proto.clinical.results.service.RetrySubmissionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.RetrySubmissionsResponse.displayName = 'proto.clinical.results.service.RetrySubmissionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.SetSubmissionStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.clinical.results.service.SetSubmissionStatusRequest.repeatedFields_, null);
};
goog.inherits(proto.clinical.results.service.SetSubmissionStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.SetSubmissionStatusRequest.displayName = 'proto.clinical.results.service.SetSubmissionStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.SetSubmissionStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.SetSubmissionStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.SetSubmissionStatusResponse.displayName = 'proto.clinical.results.service.SetSubmissionStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.WriteReportPdfRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.WriteReportPdfRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.WriteReportPdfRequest.displayName = 'proto.clinical.results.service.WriteReportPdfRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.WriteReportPdfResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.WriteReportPdfResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.WriteReportPdfResponse.displayName = 'proto.clinical.results.service.WriteReportPdfResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.ResubmitAmendedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.ResubmitAmendedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.ResubmitAmendedRequest.displayName = 'proto.clinical.results.service.ResubmitAmendedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.clinical.results.service.ResubmitAmendedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.clinical.results.service.ResubmitAmendedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.clinical.results.service.ResubmitAmendedResponse.displayName = 'proto.clinical.results.service.ResubmitAmendedResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.FetchResultsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.FetchResultsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.FetchResultsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requisitionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    approvalStatus: jspb.Message.getFieldWithDefault(msg, 2, 0),
    submissionStatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
    resultIdOffset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    batchId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    kitId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    testResult: jspb.Message.getFieldWithDefault(msg, 7, 0),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    approver: jspb.Message.getFieldWithDefault(msg, 9, ""),
    includePdfSignedUrl: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    createdAfter: (f = msg.getCreatedAfter()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    workbookId: jspb.Message.getFieldWithDefault(msg, 13, ""),
    orderByExpression: (f = msg.getOrderByExpression()) && proto.clinical.results.service.FetchResultsRequest.OrderByExpression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.FetchResultsRequest}
 */
proto.clinical.results.service.FetchResultsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.FetchResultsRequest;
  return proto.clinical.results.service.FetchResultsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.FetchResultsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.FetchResultsRequest}
 */
proto.clinical.results.service.FetchResultsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequisitionId(value);
      break;
    case 2:
      var value = /** @type {!proto.clinical.results.service.ApprovalStatus} */ (reader.readEnum());
      msg.setApprovalStatus(value);
      break;
    case 3:
      var value = /** @type {!proto.clinical.results.service.SubmissionStatus} */ (reader.readEnum());
      msg.setSubmissionStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResultIdOffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBatchId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setKitId(value);
      break;
    case 7:
      var value = /** @type {!proto.clinical.results.service.TestResult} */ (reader.readEnum());
      msg.setTestResult(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setApprover(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludePdfSignedUrl(value);
      break;
    case 12:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAfter(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkbookId(value);
      break;
    case 14:
      var value = new proto.clinical.results.service.FetchResultsRequest.OrderByExpression;
      reader.readMessage(value,proto.clinical.results.service.FetchResultsRequest.OrderByExpression.deserializeBinaryFromReader);
      msg.setOrderByExpression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.FetchResultsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.FetchResultsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.FetchResultsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequisitionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApprovalStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSubmissionStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getResultIdOffset();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getBatchId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getKitId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTestResult();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getApprover();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIncludePdfSignedUrl();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getCreatedAfter();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getWorkbookId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getOrderByExpression();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.clinical.results.service.FetchResultsRequest.OrderByExpression.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.clinical.results.service.FetchResultsRequest.OrderableField = {
  ORDERABLE_FIELD_NADA: 0,
  ORDERABLE_FIELD_REQUISITION_ID: 1,
  ORDERABLE_FIELD_KIT_ID: 2,
  ORDERABLE_FIELD_ASSAY: 3,
  ORDERABLE_FIELD_WORKBOOK_ID: 4,
  ORDERABLE_FIELD_BATCH_ID: 5,
  ORDERABLE_FIELD_WORKBOOK_OPERATOR: 6,
  ORDERABLE_FIELD_TEST_RESULT: 7,
  ORDERABLE_FIELD_TEST_VALIDITY: 8,
  ORDERABLE_FIELD_REPORT: 9,
  ORDERABLE_FIELD_CREATED_AT: 10,
  ORDERABLE_FIELD_COMMENT: 11,
  ORDERABLE_FIELD_STATUS_UPDATED_AT: 12,
  ORDERABLE_FIELD_APPROVER: 13
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.FetchResultsRequest.OrderByExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.FetchResultsRequest.OrderByExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.FetchResultsRequest.OrderByExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.FetchResultsRequest.OrderByExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, 0),
    descending: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.FetchResultsRequest.OrderByExpression}
 */
proto.clinical.results.service.FetchResultsRequest.OrderByExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.FetchResultsRequest.OrderByExpression;
  return proto.clinical.results.service.FetchResultsRequest.OrderByExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.FetchResultsRequest.OrderByExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.FetchResultsRequest.OrderByExpression}
 */
proto.clinical.results.service.FetchResultsRequest.OrderByExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.clinical.results.service.FetchResultsRequest.OrderableField} */ (reader.readEnum());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDescending(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.FetchResultsRequest.OrderByExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.FetchResultsRequest.OrderByExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.FetchResultsRequest.OrderByExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.FetchResultsRequest.OrderByExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescending();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional OrderableField field = 1;
 * @return {!proto.clinical.results.service.FetchResultsRequest.OrderableField}
 */
proto.clinical.results.service.FetchResultsRequest.OrderByExpression.prototype.getField = function() {
  return /** @type {!proto.clinical.results.service.FetchResultsRequest.OrderableField} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.clinical.results.service.FetchResultsRequest.OrderableField} value
 * @return {!proto.clinical.results.service.FetchResultsRequest.OrderByExpression} returns this
 */
proto.clinical.results.service.FetchResultsRequest.OrderByExpression.prototype.setField = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool descending = 2;
 * @return {boolean}
 */
proto.clinical.results.service.FetchResultsRequest.OrderByExpression.prototype.getDescending = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clinical.results.service.FetchResultsRequest.OrderByExpression} returns this
 */
proto.clinical.results.service.FetchResultsRequest.OrderByExpression.prototype.setDescending = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string requisition_id = 1;
 * @return {string}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getRequisitionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.setRequisitionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ApprovalStatus approval_status = 2;
 * @return {!proto.clinical.results.service.ApprovalStatus}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getApprovalStatus = function() {
  return /** @type {!proto.clinical.results.service.ApprovalStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.clinical.results.service.ApprovalStatus} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.setApprovalStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional SubmissionStatus submission_status = 3;
 * @return {!proto.clinical.results.service.SubmissionStatus}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getSubmissionStatus = function() {
  return /** @type {!proto.clinical.results.service.SubmissionStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.clinical.results.service.SubmissionStatus} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.setSubmissionStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 result_id_offset = 4;
 * @return {number}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getResultIdOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.setResultIdOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 limit = 5;
 * @return {number}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string batch_id = 6;
 * @return {string}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getBatchId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.setBatchId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string kit_id = 11;
 * @return {string}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getKitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.setKitId = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional TestResult test_result = 7;
 * @return {!proto.clinical.results.service.TestResult}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getTestResult = function() {
  return /** @type {!proto.clinical.results.service.TestResult} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.clinical.results.service.TestResult} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.setTestResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
*/
proto.clinical.results.service.FetchResultsRequest.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string approver = 9;
 * @return {string}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getApprover = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.setApprover = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool include_pdf_signed_url = 10;
 * @return {boolean}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getIncludePdfSignedUrl = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.setIncludePdfSignedUrl = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional google.protobuf.Timestamp created_after = 12;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getCreatedAfter = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 12));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
*/
proto.clinical.results.service.FetchResultsRequest.prototype.setCreatedAfter = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.clearCreatedAfter = function() {
  return this.setCreatedAfter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.hasCreatedAfter = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string workbook_id = 13;
 * @return {string}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getWorkbookId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.setWorkbookId = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional OrderByExpression order_by_expression = 14;
 * @return {?proto.clinical.results.service.FetchResultsRequest.OrderByExpression}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.getOrderByExpression = function() {
  return /** @type{?proto.clinical.results.service.FetchResultsRequest.OrderByExpression} */ (
    jspb.Message.getWrapperField(this, proto.clinical.results.service.FetchResultsRequest.OrderByExpression, 14));
};


/**
 * @param {?proto.clinical.results.service.FetchResultsRequest.OrderByExpression|undefined} value
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
*/
proto.clinical.results.service.FetchResultsRequest.prototype.setOrderByExpression = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.FetchResultsRequest} returns this
 */
proto.clinical.results.service.FetchResultsRequest.prototype.clearOrderByExpression = function() {
  return this.setOrderByExpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.FetchResultsRequest.prototype.hasOrderByExpression = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clinical.results.service.FetchResultsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.FetchResultsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.FetchResultsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.FetchResultsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.FetchResultsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.clinical.results.service.Result.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.FetchResultsResponse}
 */
proto.clinical.results.service.FetchResultsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.FetchResultsResponse;
  return proto.clinical.results.service.FetchResultsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.FetchResultsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.FetchResultsResponse}
 */
proto.clinical.results.service.FetchResultsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clinical.results.service.Result;
      reader.readMessage(value,proto.clinical.results.service.Result.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.FetchResultsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.FetchResultsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.FetchResultsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.FetchResultsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.clinical.results.service.Result.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Result results = 1;
 * @return {!Array<!proto.clinical.results.service.Result>}
 */
proto.clinical.results.service.FetchResultsResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.clinical.results.service.Result>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clinical.results.service.Result, 1));
};


/**
 * @param {!Array<!proto.clinical.results.service.Result>} value
 * @return {!proto.clinical.results.service.FetchResultsResponse} returns this
*/
proto.clinical.results.service.FetchResultsResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.clinical.results.service.Result=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clinical.results.service.Result}
 */
proto.clinical.results.service.FetchResultsResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.clinical.results.service.Result, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clinical.results.service.FetchResultsResponse} returns this
 */
proto.clinical.results.service.FetchResultsResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clinical.results.service.Result.repeatedFields_ = [19,24];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requisitionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    kitId: jspb.Message.getFieldWithDefault(msg, 25, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    assay: jspb.Message.getFieldWithDefault(msg, 4, 0),
    workbookId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    batchId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    workbookOperator: jspb.Message.getFieldWithDefault(msg, 7, ""),
    testValidity: jspb.Message.getFieldWithDefault(msg, 8, 0),
    testResult: jspb.Message.getFieldWithDefault(msg, 9, 0),
    reportGcsPath: jspb.Message.getFieldWithDefault(msg, 10, ""),
    reportPdfSignedUrl: jspb.Message.getFieldWithDefault(msg, 16, ""),
    reportId: jspb.Message.getFieldWithDefault(msg, 11, 0),
    comment: jspb.Message.getFieldWithDefault(msg, 12, ""),
    approvalStatus: jspb.Message.getFieldWithDefault(msg, 13, 0),
    approver: jspb.Message.getFieldWithDefault(msg, 14, ""),
    statusUpdatedAt: jspb.Message.getFieldWithDefault(msg, 15, 0),
    approvalId: jspb.Message.getFieldWithDefault(msg, 20, 0),
    approvalManuallyOverriddenBy: jspb.Message.getFieldWithDefault(msg, 23, ""),
    accessionedAt: jspb.Message.getFieldWithDefault(msg, 18, 0),
    isSubmitted: jspb.Message.getBooleanFieldWithDefault(msg, 17, false),
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.clinical.results.service.Result.Error.toObject, includeInstance),
    device: jspb.Message.getFieldWithDefault(msg, 21, 0),
    collectedAt: jspb.Message.getFieldWithDefault(msg, 22, 0),
    submissionsList: jspb.Message.toObjectList(msg.getSubmissionsList(),
    proto.clinical.results.service.Result.Submission.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.Result}
 */
proto.clinical.results.service.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.Result;
  return proto.clinical.results.service.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.Result}
 */
proto.clinical.results.service.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResultId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequisitionId(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setKitId(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 4:
      var value = /** @type {!proto.clinical.results.service.Assay} */ (reader.readEnum());
      msg.setAssay(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkbookId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBatchId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkbookOperator(value);
      break;
    case 8:
      var value = /** @type {!proto.clinical.results.service.TestValidity} */ (reader.readEnum());
      msg.setTestValidity(value);
      break;
    case 9:
      var value = /** @type {!proto.clinical.results.service.TestResult} */ (reader.readEnum());
      msg.setTestResult(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportGcsPath(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportPdfSignedUrl(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReportId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 13:
      var value = /** @type {!proto.clinical.results.service.ApprovalStatus} */ (reader.readEnum());
      msg.setApprovalStatus(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setApprover(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStatusUpdatedAt(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApprovalId(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setApprovalManuallyOverriddenBy(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccessionedAt(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSubmitted(value);
      break;
    case 19:
      var value = new proto.clinical.results.service.Result.Error;
      reader.readMessage(value,proto.clinical.results.service.Result.Error.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    case 21:
      var value = /** @type {!proto.clinical.results.service.Device} */ (reader.readEnum());
      msg.setDevice(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCollectedAt(value);
      break;
    case 24:
      var value = new proto.clinical.results.service.Result.Submission;
      reader.readMessage(value,proto.clinical.results.service.Result.Submission.deserializeBinaryFromReader);
      msg.addSubmissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRequisitionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKitId();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAssay();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getWorkbookId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getBatchId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getWorkbookOperator();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTestValidity();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getTestResult();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getReportGcsPath();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getReportPdfSignedUrl();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getReportId();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getApprovalStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getApprover();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getStatusUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getApprovalId();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getApprovalManuallyOverriddenBy();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getAccessionedAt();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getIsSubmitted();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      19,
      f,
      proto.clinical.results.service.Result.Error.serializeBinaryToWriter
    );
  }
  f = message.getDevice();
  if (f !== 0.0) {
    writer.writeEnum(
      21,
      f
    );
  }
  f = message.getCollectedAt();
  if (f !== 0) {
    writer.writeInt64(
      22,
      f
    );
  }
  f = message.getSubmissionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      24,
      f,
      proto.clinical.results.service.Result.Submission.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.Result.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.Result.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.Result.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.Result.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalEntity: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.Result.Error}
 */
proto.clinical.results.service.Result.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.Result.Error;
  return proto.clinical.results.service.Result.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.Result.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.Result.Error}
 */
proto.clinical.results.service.Result.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalEntity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.Result.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.Result.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.Result.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.Result.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalEntity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string external_entity = 1;
 * @return {string}
 */
proto.clinical.results.service.Result.Error.prototype.getExternalEntity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result.Error} returns this
 */
proto.clinical.results.service.Result.Error.prototype.setExternalEntity = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.clinical.results.service.Result.Error.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result.Error} returns this
 */
proto.clinical.results.service.Result.Error.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.Result.Submission.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.Result.Submission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.Result.Submission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.Result.Submission.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalEntityId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    externalEntityName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    manuallyOverriddenBy: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.Result.Submission}
 */
proto.clinical.results.service.Result.Submission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.Result.Submission;
  return proto.clinical.results.service.Result.Submission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.Result.Submission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.Result.Submission}
 */
proto.clinical.results.service.Result.Submission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExternalEntityId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalEntityName(value);
      break;
    case 2:
      var value = /** @type {!proto.clinical.results.service.SubmissionStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setManuallyOverriddenBy(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.Result.Submission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.Result.Submission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.Result.Submission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.Result.Submission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalEntityId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getExternalEntityName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getManuallyOverriddenBy();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 external_entity_id = 1;
 * @return {number}
 */
proto.clinical.results.service.Result.Submission.prototype.getExternalEntityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.Result.Submission} returns this
 */
proto.clinical.results.service.Result.Submission.prototype.setExternalEntityId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string external_entity_name = 4;
 * @return {string}
 */
proto.clinical.results.service.Result.Submission.prototype.getExternalEntityName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result.Submission} returns this
 */
proto.clinical.results.service.Result.Submission.prototype.setExternalEntityName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional SubmissionStatus status = 2;
 * @return {!proto.clinical.results.service.SubmissionStatus}
 */
proto.clinical.results.service.Result.Submission.prototype.getStatus = function() {
  return /** @type {!proto.clinical.results.service.SubmissionStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.clinical.results.service.SubmissionStatus} value
 * @return {!proto.clinical.results.service.Result.Submission} returns this
 */
proto.clinical.results.service.Result.Submission.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string manually_overridden_by = 3;
 * @return {string}
 */
proto.clinical.results.service.Result.Submission.prototype.getManuallyOverriddenBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result.Submission} returns this
 */
proto.clinical.results.service.Result.Submission.prototype.setManuallyOverriddenBy = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.clinical.results.service.Result.Submission.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.clinical.results.service.Result.Submission} returns this
*/
proto.clinical.results.service.Result.Submission.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.Result.Submission} returns this
 */
proto.clinical.results.service.Result.Submission.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.Result.Submission.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 result_id = 1;
 * @return {number}
 */
proto.clinical.results.service.Result.prototype.getResultId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setResultId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string requisition_id = 2;
 * @return {string}
 */
proto.clinical.results.service.Result.prototype.getRequisitionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setRequisitionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string kit_id = 25;
 * @return {string}
 */
proto.clinical.results.service.Result.prototype.getKitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setKitId = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.clinical.results.service.Result.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.clinical.results.service.Result} returns this
*/
proto.clinical.results.service.Result.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.Result.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Assay assay = 4;
 * @return {!proto.clinical.results.service.Assay}
 */
proto.clinical.results.service.Result.prototype.getAssay = function() {
  return /** @type {!proto.clinical.results.service.Assay} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.clinical.results.service.Assay} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setAssay = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 workbook_id = 5;
 * @return {number}
 */
proto.clinical.results.service.Result.prototype.getWorkbookId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setWorkbookId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string batch_id = 6;
 * @return {string}
 */
proto.clinical.results.service.Result.prototype.getBatchId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setBatchId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string workbook_operator = 7;
 * @return {string}
 */
proto.clinical.results.service.Result.prototype.getWorkbookOperator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setWorkbookOperator = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional TestValidity test_validity = 8;
 * @return {!proto.clinical.results.service.TestValidity}
 */
proto.clinical.results.service.Result.prototype.getTestValidity = function() {
  return /** @type {!proto.clinical.results.service.TestValidity} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.clinical.results.service.TestValidity} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setTestValidity = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional TestResult test_result = 9;
 * @return {!proto.clinical.results.service.TestResult}
 */
proto.clinical.results.service.Result.prototype.getTestResult = function() {
  return /** @type {!proto.clinical.results.service.TestResult} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.clinical.results.service.TestResult} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setTestResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional string report_gcs_path = 10;
 * @return {string}
 */
proto.clinical.results.service.Result.prototype.getReportGcsPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setReportGcsPath = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string report_pdf_signed_url = 16;
 * @return {string}
 */
proto.clinical.results.service.Result.prototype.getReportPdfSignedUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setReportPdfSignedUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional int32 report_id = 11;
 * @return {number}
 */
proto.clinical.results.service.Result.prototype.getReportId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setReportId = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string comment = 12;
 * @return {string}
 */
proto.clinical.results.service.Result.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional ApprovalStatus approval_status = 13;
 * @return {!proto.clinical.results.service.ApprovalStatus}
 */
proto.clinical.results.service.Result.prototype.getApprovalStatus = function() {
  return /** @type {!proto.clinical.results.service.ApprovalStatus} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.clinical.results.service.ApprovalStatus} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setApprovalStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional string approver = 14;
 * @return {string}
 */
proto.clinical.results.service.Result.prototype.getApprover = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setApprover = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int64 status_updated_at = 15;
 * @return {number}
 */
proto.clinical.results.service.Result.prototype.getStatusUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setStatusUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 approval_id = 20;
 * @return {number}
 */
proto.clinical.results.service.Result.prototype.getApprovalId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setApprovalId = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional string approval_manually_overridden_by = 23;
 * @return {string}
 */
proto.clinical.results.service.Result.prototype.getApprovalManuallyOverriddenBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setApprovalManuallyOverriddenBy = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional int64 accessioned_at = 18;
 * @return {number}
 */
proto.clinical.results.service.Result.prototype.getAccessionedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setAccessionedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional bool is_submitted = 17;
 * @return {boolean}
 */
proto.clinical.results.service.Result.prototype.getIsSubmitted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setIsSubmitted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * repeated Error errors = 19;
 * @return {!Array<!proto.clinical.results.service.Result.Error>}
 */
proto.clinical.results.service.Result.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.clinical.results.service.Result.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clinical.results.service.Result.Error, 19));
};


/**
 * @param {!Array<!proto.clinical.results.service.Result.Error>} value
 * @return {!proto.clinical.results.service.Result} returns this
*/
proto.clinical.results.service.Result.prototype.setErrorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 19, value);
};


/**
 * @param {!proto.clinical.results.service.Result.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clinical.results.service.Result.Error}
 */
proto.clinical.results.service.Result.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 19, opt_value, proto.clinical.results.service.Result.Error, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.clearErrorsList = function() {
  return this.setErrorsList([]);
};


/**
 * optional Device device = 21;
 * @return {!proto.clinical.results.service.Device}
 */
proto.clinical.results.service.Result.prototype.getDevice = function() {
  return /** @type {!proto.clinical.results.service.Device} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {!proto.clinical.results.service.Device} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setDevice = function(value) {
  return jspb.Message.setProto3EnumField(this, 21, value);
};


/**
 * optional int64 collected_at = 22;
 * @return {number}
 */
proto.clinical.results.service.Result.prototype.getCollectedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.setCollectedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * repeated Submission submissions = 24;
 * @return {!Array<!proto.clinical.results.service.Result.Submission>}
 */
proto.clinical.results.service.Result.prototype.getSubmissionsList = function() {
  return /** @type{!Array<!proto.clinical.results.service.Result.Submission>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clinical.results.service.Result.Submission, 24));
};


/**
 * @param {!Array<!proto.clinical.results.service.Result.Submission>} value
 * @return {!proto.clinical.results.service.Result} returns this
*/
proto.clinical.results.service.Result.prototype.setSubmissionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 24, value);
};


/**
 * @param {!proto.clinical.results.service.Result.Submission=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clinical.results.service.Result.Submission}
 */
proto.clinical.results.service.Result.prototype.addSubmissions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 24, opt_value, proto.clinical.results.service.Result.Submission, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clinical.results.service.Result} returns this
 */
proto.clinical.results.service.Result.prototype.clearSubmissionsList = function() {
  return this.setSubmissionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.SetApprovalStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.SetApprovalStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.SetApprovalStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.SetApprovalStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    approvalStatus: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.SetApprovalStatusRequest}
 */
proto.clinical.results.service.SetApprovalStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.SetApprovalStatusRequest;
  return proto.clinical.results.service.SetApprovalStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.SetApprovalStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.SetApprovalStatusRequest}
 */
proto.clinical.results.service.SetApprovalStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReportId(value);
      break;
    case 2:
      var value = /** @type {!proto.clinical.results.service.ApprovalStatus} */ (reader.readEnum());
      msg.setApprovalStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.SetApprovalStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.SetApprovalStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.SetApprovalStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.SetApprovalStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getApprovalStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 report_id = 1;
 * @return {number}
 */
proto.clinical.results.service.SetApprovalStatusRequest.prototype.getReportId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.SetApprovalStatusRequest} returns this
 */
proto.clinical.results.service.SetApprovalStatusRequest.prototype.setReportId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ApprovalStatus approval_status = 2;
 * @return {!proto.clinical.results.service.ApprovalStatus}
 */
proto.clinical.results.service.SetApprovalStatusRequest.prototype.getApprovalStatus = function() {
  return /** @type {!proto.clinical.results.service.ApprovalStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.clinical.results.service.ApprovalStatus} value
 * @return {!proto.clinical.results.service.SetApprovalStatusRequest} returns this
 */
proto.clinical.results.service.SetApprovalStatusRequest.prototype.setApprovalStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.SetApprovalStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.SetApprovalStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.SetApprovalStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.SetApprovalStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.SetApprovalStatusResponse}
 */
proto.clinical.results.service.SetApprovalStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.SetApprovalStatusResponse;
  return proto.clinical.results.service.SetApprovalStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.SetApprovalStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.SetApprovalStatusResponse}
 */
proto.clinical.results.service.SetApprovalStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.SetApprovalStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.SetApprovalStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.SetApprovalStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.SetApprovalStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.CommentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.CommentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.CommentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.CommentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    comment: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reportId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.CommentRequest}
 */
proto.clinical.results.service.CommentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.CommentRequest;
  return proto.clinical.results.service.CommentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.CommentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.CommentRequest}
 */
proto.clinical.results.service.CommentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReportId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.CommentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.CommentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.CommentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.CommentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReportId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string comment = 1;
 * @return {string}
 */
proto.clinical.results.service.CommentRequest.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.CommentRequest} returns this
 */
proto.clinical.results.service.CommentRequest.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 report_id = 2;
 * @return {number}
 */
proto.clinical.results.service.CommentRequest.prototype.getReportId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.CommentRequest} returns this
 */
proto.clinical.results.service.CommentRequest.prototype.setReportId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.CommentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.CommentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.CommentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.CommentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.clinical.results.service.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.CommentResponse}
 */
proto.clinical.results.service.CommentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.CommentResponse;
  return proto.clinical.results.service.CommentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.CommentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.CommentResponse}
 */
proto.clinical.results.service.CommentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clinical.results.service.Result;
      reader.readMessage(value,proto.clinical.results.service.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.CommentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.CommentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.CommentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.CommentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clinical.results.service.Result.serializeBinaryToWriter
    );
  }
};


/**
 * optional Result result = 1;
 * @return {?proto.clinical.results.service.Result}
 */
proto.clinical.results.service.CommentResponse.prototype.getResult = function() {
  return /** @type{?proto.clinical.results.service.Result} */ (
    jspb.Message.getWrapperField(this, proto.clinical.results.service.Result, 1));
};


/**
 * @param {?proto.clinical.results.service.Result|undefined} value
 * @return {!proto.clinical.results.service.CommentResponse} returns this
*/
proto.clinical.results.service.CommentResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.CommentResponse} returns this
 */
proto.clinical.results.service.CommentResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.CommentResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.GetResultRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.GetResultRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.GetResultRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.GetResultRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.GetResultRequest}
 */
proto.clinical.results.service.GetResultRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.GetResultRequest;
  return proto.clinical.results.service.GetResultRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.GetResultRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.GetResultRequest}
 */
proto.clinical.results.service.GetResultRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResultId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.GetResultRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.GetResultRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.GetResultRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.GetResultRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 result_id = 1;
 * @return {number}
 */
proto.clinical.results.service.GetResultRequest.prototype.getResultId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.GetResultRequest} returns this
 */
proto.clinical.results.service.GetResultRequest.prototype.setResultId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.GetResultResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.GetResultResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.GetResultResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.GetResultResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.clinical.results.service.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.GetResultResponse}
 */
proto.clinical.results.service.GetResultResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.GetResultResponse;
  return proto.clinical.results.service.GetResultResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.GetResultResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.GetResultResponse}
 */
proto.clinical.results.service.GetResultResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clinical.results.service.Result;
      reader.readMessage(value,proto.clinical.results.service.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.GetResultResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.GetResultResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.GetResultResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.GetResultResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clinical.results.service.Result.serializeBinaryToWriter
    );
  }
};


/**
 * optional Result result = 1;
 * @return {?proto.clinical.results.service.Result}
 */
proto.clinical.results.service.GetResultResponse.prototype.getResult = function() {
  return /** @type{?proto.clinical.results.service.Result} */ (
    jspb.Message.getWrapperField(this, proto.clinical.results.service.Result, 1));
};


/**
 * @param {?proto.clinical.results.service.Result|undefined} value
 * @return {!proto.clinical.results.service.GetResultResponse} returns this
*/
proto.clinical.results.service.GetResultResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.GetResultResponse} returns this
 */
proto.clinical.results.service.GetResultResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.GetResultResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clinical.results.service.ActionRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.ActionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.ActionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.ActionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.ActionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    approvalStatus: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.ActionRequest}
 */
proto.clinical.results.service.ActionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.ActionRequest;
  return proto.clinical.results.service.ActionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.ActionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.ActionRequest}
 */
proto.clinical.results.service.ActionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setReportIdsList(value);
      break;
    case 2:
      var value = /** @type {!proto.clinical.results.service.ApprovalStatus} */ (reader.readEnum());
      msg.setApprovalStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.ActionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.ActionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.ActionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.ActionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getApprovalStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated int32 report_ids = 1;
 * @return {!Array<number>}
 */
proto.clinical.results.service.ActionRequest.prototype.getReportIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.clinical.results.service.ActionRequest} returns this
 */
proto.clinical.results.service.ActionRequest.prototype.setReportIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.clinical.results.service.ActionRequest} returns this
 */
proto.clinical.results.service.ActionRequest.prototype.addReportIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clinical.results.service.ActionRequest} returns this
 */
proto.clinical.results.service.ActionRequest.prototype.clearReportIdsList = function() {
  return this.setReportIdsList([]);
};


/**
 * optional ApprovalStatus approval_status = 2;
 * @return {!proto.clinical.results.service.ApprovalStatus}
 */
proto.clinical.results.service.ActionRequest.prototype.getApprovalStatus = function() {
  return /** @type {!proto.clinical.results.service.ApprovalStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.clinical.results.service.ApprovalStatus} value
 * @return {!proto.clinical.results.service.ActionRequest} returns this
 */
proto.clinical.results.service.ActionRequest.prototype.setApprovalStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clinical.results.service.ActionResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.ActionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.ActionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.ActionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.ActionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.ActionResponse}
 */
proto.clinical.results.service.ActionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.ActionResponse;
  return proto.clinical.results.service.ActionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.ActionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.ActionResponse}
 */
proto.clinical.results.service.ActionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setReportIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.ActionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.ActionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.ActionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.ActionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 report_ids = 1;
 * @return {!Array<number>}
 */
proto.clinical.results.service.ActionResponse.prototype.getReportIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.clinical.results.service.ActionResponse} returns this
 */
proto.clinical.results.service.ActionResponse.prototype.setReportIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.clinical.results.service.ActionResponse} returns this
 */
proto.clinical.results.service.ActionResponse.prototype.addReportIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clinical.results.service.ActionResponse} returns this
 */
proto.clinical.results.service.ActionResponse.prototype.clearReportIdsList = function() {
  return this.setReportIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.ResubmitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.ResubmitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.ResubmitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.ResubmitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    changedFields: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userInitials: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.ResubmitRequest}
 */
proto.clinical.results.service.ResubmitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.ResubmitRequest;
  return proto.clinical.results.service.ResubmitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.ResubmitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.ResubmitRequest}
 */
proto.clinical.results.service.ResubmitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReportId(value);
      break;
    case 2:
      var value = /** @type {!proto.clinical.results.service.Stamp} */ (reader.readEnum());
      msg.setStamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChangedFields(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserInitials(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.ResubmitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.ResubmitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.ResubmitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.ResubmitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStamp();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getChangedFields();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserInitials();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 report_id = 1;
 * @return {number}
 */
proto.clinical.results.service.ResubmitRequest.prototype.getReportId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.ResubmitRequest} returns this
 */
proto.clinical.results.service.ResubmitRequest.prototype.setReportId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Stamp stamp = 2;
 * @return {!proto.clinical.results.service.Stamp}
 */
proto.clinical.results.service.ResubmitRequest.prototype.getStamp = function() {
  return /** @type {!proto.clinical.results.service.Stamp} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.clinical.results.service.Stamp} value
 * @return {!proto.clinical.results.service.ResubmitRequest} returns this
 */
proto.clinical.results.service.ResubmitRequest.prototype.setStamp = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string changed_fields = 3;
 * @return {string}
 */
proto.clinical.results.service.ResubmitRequest.prototype.getChangedFields = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.ResubmitRequest} returns this
 */
proto.clinical.results.service.ResubmitRequest.prototype.setChangedFields = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user_initials = 4;
 * @return {string}
 */
proto.clinical.results.service.ResubmitRequest.prototype.getUserInitials = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.ResubmitRequest} returns this
 */
proto.clinical.results.service.ResubmitRequest.prototype.setUserInitials = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.ResubmitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.ResubmitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.ResubmitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.ResubmitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.ResubmitResponse}
 */
proto.clinical.results.service.ResubmitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.ResubmitResponse;
  return proto.clinical.results.service.ResubmitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.ResubmitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.ResubmitResponse}
 */
proto.clinical.results.service.ResubmitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReportId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.ResubmitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.ResubmitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.ResubmitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.ResubmitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 report_id = 1;
 * @return {number}
 */
proto.clinical.results.service.ResubmitResponse.prototype.getReportId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.ResubmitResponse} returns this
 */
proto.clinical.results.service.ResubmitResponse.prototype.setReportId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clinical.results.service.PostResultsRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.PostResultsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.PostResultsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.PostResultsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.PostResultsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    assay: jspb.Message.getFieldWithDefault(msg, 1, 0),
    workbookId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    workbookOperator: jspb.Message.getFieldWithDefault(msg, 3, ""),
    samplesList: jspb.Message.toObjectList(msg.getSamplesList(),
    proto.clinical.results.service.PostResultsRequest.Sample.toObject, includeInstance),
    device: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.PostResultsRequest}
 */
proto.clinical.results.service.PostResultsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.PostResultsRequest;
  return proto.clinical.results.service.PostResultsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.PostResultsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.PostResultsRequest}
 */
proto.clinical.results.service.PostResultsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.clinical.results.service.Assay} */ (reader.readEnum());
      msg.setAssay(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorkbookId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkbookOperator(value);
      break;
    case 4:
      var value = new proto.clinical.results.service.PostResultsRequest.Sample;
      reader.readMessage(value,proto.clinical.results.service.PostResultsRequest.Sample.deserializeBinaryFromReader);
      msg.addSamples(value);
      break;
    case 5:
      var value = /** @type {!proto.clinical.results.service.Device} */ (reader.readEnum());
      msg.setDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.PostResultsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.PostResultsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.PostResultsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.PostResultsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssay();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getWorkbookId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getWorkbookOperator();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSamplesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.clinical.results.service.PostResultsRequest.Sample.serializeBinaryToWriter
    );
  }
  f = message.getDevice();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.PostResultsRequest.Sample.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.PostResultsRequest.Sample} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.PostResultsRequest.Sample.toObject = function(includeInstance, msg) {
  var f, obj = {
    requisitionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    testValidity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    testResult: jspb.Message.getFieldWithDefault(msg, 3, 0),
    accessionedAt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    comment: jspb.Message.getFieldWithDefault(msg, 5, ""),
    collectedAt: jspb.Message.getFieldWithDefault(msg, 6, 0),
    kitId: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.PostResultsRequest.Sample}
 */
proto.clinical.results.service.PostResultsRequest.Sample.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.PostResultsRequest.Sample;
  return proto.clinical.results.service.PostResultsRequest.Sample.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.PostResultsRequest.Sample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.PostResultsRequest.Sample}
 */
proto.clinical.results.service.PostResultsRequest.Sample.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequisitionId(value);
      break;
    case 2:
      var value = /** @type {!proto.clinical.results.service.TestValidity} */ (reader.readEnum());
      msg.setTestValidity(value);
      break;
    case 3:
      var value = /** @type {!proto.clinical.results.service.TestResult} */ (reader.readEnum());
      msg.setTestResult(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccessionedAt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCollectedAt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setKitId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.PostResultsRequest.Sample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.PostResultsRequest.Sample} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.PostResultsRequest.Sample.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequisitionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTestValidity();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTestResult();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAccessionedAt();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCollectedAt();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getKitId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string requisition_id = 1;
 * @return {string}
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.getRequisitionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.PostResultsRequest.Sample} returns this
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.setRequisitionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TestValidity test_validity = 2;
 * @return {!proto.clinical.results.service.TestValidity}
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.getTestValidity = function() {
  return /** @type {!proto.clinical.results.service.TestValidity} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.clinical.results.service.TestValidity} value
 * @return {!proto.clinical.results.service.PostResultsRequest.Sample} returns this
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.setTestValidity = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional TestResult test_result = 3;
 * @return {!proto.clinical.results.service.TestResult}
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.getTestResult = function() {
  return /** @type {!proto.clinical.results.service.TestResult} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.clinical.results.service.TestResult} value
 * @return {!proto.clinical.results.service.PostResultsRequest.Sample} returns this
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.setTestResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int64 accessioned_at = 4;
 * @return {number}
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.getAccessionedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.PostResultsRequest.Sample} returns this
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.setAccessionedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string comment = 5;
 * @return {string}
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.PostResultsRequest.Sample} returns this
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 collected_at = 6;
 * @return {number}
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.getCollectedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.PostResultsRequest.Sample} returns this
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.setCollectedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string kit_id = 7;
 * @return {string}
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.getKitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.PostResultsRequest.Sample} returns this
 */
proto.clinical.results.service.PostResultsRequest.Sample.prototype.setKitId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional Assay assay = 1;
 * @return {!proto.clinical.results.service.Assay}
 */
proto.clinical.results.service.PostResultsRequest.prototype.getAssay = function() {
  return /** @type {!proto.clinical.results.service.Assay} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.clinical.results.service.Assay} value
 * @return {!proto.clinical.results.service.PostResultsRequest} returns this
 */
proto.clinical.results.service.PostResultsRequest.prototype.setAssay = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 workbook_id = 2;
 * @return {number}
 */
proto.clinical.results.service.PostResultsRequest.prototype.getWorkbookId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.PostResultsRequest} returns this
 */
proto.clinical.results.service.PostResultsRequest.prototype.setWorkbookId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string workbook_operator = 3;
 * @return {string}
 */
proto.clinical.results.service.PostResultsRequest.prototype.getWorkbookOperator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.PostResultsRequest} returns this
 */
proto.clinical.results.service.PostResultsRequest.prototype.setWorkbookOperator = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Sample samples = 4;
 * @return {!Array<!proto.clinical.results.service.PostResultsRequest.Sample>}
 */
proto.clinical.results.service.PostResultsRequest.prototype.getSamplesList = function() {
  return /** @type{!Array<!proto.clinical.results.service.PostResultsRequest.Sample>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clinical.results.service.PostResultsRequest.Sample, 4));
};


/**
 * @param {!Array<!proto.clinical.results.service.PostResultsRequest.Sample>} value
 * @return {!proto.clinical.results.service.PostResultsRequest} returns this
*/
proto.clinical.results.service.PostResultsRequest.prototype.setSamplesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.clinical.results.service.PostResultsRequest.Sample=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clinical.results.service.PostResultsRequest.Sample}
 */
proto.clinical.results.service.PostResultsRequest.prototype.addSamples = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.clinical.results.service.PostResultsRequest.Sample, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clinical.results.service.PostResultsRequest} returns this
 */
proto.clinical.results.service.PostResultsRequest.prototype.clearSamplesList = function() {
  return this.setSamplesList([]);
};


/**
 * optional Device device = 5;
 * @return {!proto.clinical.results.service.Device}
 */
proto.clinical.results.service.PostResultsRequest.prototype.getDevice = function() {
  return /** @type {!proto.clinical.results.service.Device} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.clinical.results.service.Device} value
 * @return {!proto.clinical.results.service.PostResultsRequest} returns this
 */
proto.clinical.results.service.PostResultsRequest.prototype.setDevice = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clinical.results.service.PostResultsResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.PostResultsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.PostResultsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.PostResultsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.PostResultsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    errorsList: jspb.Message.toObjectList(msg.getErrorsList(),
    proto.clinical.results.service.PostResultsResponse.Error.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.PostResultsResponse}
 */
proto.clinical.results.service.PostResultsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.PostResultsResponse;
  return proto.clinical.results.service.PostResultsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.PostResultsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.PostResultsResponse}
 */
proto.clinical.results.service.PostResultsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setResultIdsList(value);
      break;
    case 2:
      var value = new proto.clinical.results.service.PostResultsResponse.Error;
      reader.readMessage(value,proto.clinical.results.service.PostResultsResponse.Error.deserializeBinaryFromReader);
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.PostResultsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.PostResultsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.PostResultsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.PostResultsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.clinical.results.service.PostResultsResponse.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.PostResultsResponse.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.PostResultsResponse.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.PostResultsResponse.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.PostResultsResponse.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    requisitionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.PostResultsResponse.Error}
 */
proto.clinical.results.service.PostResultsResponse.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.PostResultsResponse.Error;
  return proto.clinical.results.service.PostResultsResponse.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.PostResultsResponse.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.PostResultsResponse.Error}
 */
proto.clinical.results.service.PostResultsResponse.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequisitionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.PostResultsResponse.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.PostResultsResponse.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.PostResultsResponse.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.PostResultsResponse.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequisitionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string requisition_id = 1;
 * @return {string}
 */
proto.clinical.results.service.PostResultsResponse.Error.prototype.getRequisitionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.PostResultsResponse.Error} returns this
 */
proto.clinical.results.service.PostResultsResponse.Error.prototype.setRequisitionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.clinical.results.service.PostResultsResponse.Error.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.PostResultsResponse.Error} returns this
 */
proto.clinical.results.service.PostResultsResponse.Error.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated int32 result_ids = 1;
 * @return {!Array<number>}
 */
proto.clinical.results.service.PostResultsResponse.prototype.getResultIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.clinical.results.service.PostResultsResponse} returns this
 */
proto.clinical.results.service.PostResultsResponse.prototype.setResultIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.clinical.results.service.PostResultsResponse} returns this
 */
proto.clinical.results.service.PostResultsResponse.prototype.addResultIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clinical.results.service.PostResultsResponse} returns this
 */
proto.clinical.results.service.PostResultsResponse.prototype.clearResultIdsList = function() {
  return this.setResultIdsList([]);
};


/**
 * repeated Error errors = 2;
 * @return {!Array<!proto.clinical.results.service.PostResultsResponse.Error>}
 */
proto.clinical.results.service.PostResultsResponse.prototype.getErrorsList = function() {
  return /** @type{!Array<!proto.clinical.results.service.PostResultsResponse.Error>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.clinical.results.service.PostResultsResponse.Error, 2));
};


/**
 * @param {!Array<!proto.clinical.results.service.PostResultsResponse.Error>} value
 * @return {!proto.clinical.results.service.PostResultsResponse} returns this
*/
proto.clinical.results.service.PostResultsResponse.prototype.setErrorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.clinical.results.service.PostResultsResponse.Error=} opt_value
 * @param {number=} opt_index
 * @return {!proto.clinical.results.service.PostResultsResponse.Error}
 */
proto.clinical.results.service.PostResultsResponse.prototype.addErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.clinical.results.service.PostResultsResponse.Error, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clinical.results.service.PostResultsResponse} returns this
 */
proto.clinical.results.service.PostResultsResponse.prototype.clearErrorsList = function() {
  return this.setErrorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.SubmitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.SubmitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.SubmitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.SubmitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.clinical.results.service.Result.toObject(includeInstance, f),
    externalEntityName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    externalEntityId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    stamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    order: (f = msg.getOrder()) && pwnhealth_pb.Order.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.SubmitRequest}
 */
proto.clinical.results.service.SubmitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.SubmitRequest;
  return proto.clinical.results.service.SubmitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.SubmitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.SubmitRequest}
 */
proto.clinical.results.service.SubmitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clinical.results.service.Result;
      reader.readMessage(value,proto.clinical.results.service.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalEntityName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExternalEntityId(value);
      break;
    case 4:
      var value = /** @type {!proto.clinical.results.service.Stamp} */ (reader.readEnum());
      msg.setStamp(value);
      break;
    case 5:
      var value = new pwnhealth_pb.Order;
      reader.readMessage(value,pwnhealth_pb.Order.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.SubmitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.SubmitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.SubmitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.SubmitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clinical.results.service.Result.serializeBinaryToWriter
    );
  }
  f = message.getExternalEntityName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExternalEntityId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStamp();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      pwnhealth_pb.Order.serializeBinaryToWriter
    );
  }
};


/**
 * optional Result result = 1;
 * @return {?proto.clinical.results.service.Result}
 */
proto.clinical.results.service.SubmitRequest.prototype.getResult = function() {
  return /** @type{?proto.clinical.results.service.Result} */ (
    jspb.Message.getWrapperField(this, proto.clinical.results.service.Result, 1));
};


/**
 * @param {?proto.clinical.results.service.Result|undefined} value
 * @return {!proto.clinical.results.service.SubmitRequest} returns this
*/
proto.clinical.results.service.SubmitRequest.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.SubmitRequest} returns this
 */
proto.clinical.results.service.SubmitRequest.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.SubmitRequest.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string external_entity_name = 2;
 * @return {string}
 */
proto.clinical.results.service.SubmitRequest.prototype.getExternalEntityName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.SubmitRequest} returns this
 */
proto.clinical.results.service.SubmitRequest.prototype.setExternalEntityName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 external_entity_id = 3;
 * @return {number}
 */
proto.clinical.results.service.SubmitRequest.prototype.getExternalEntityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.SubmitRequest} returns this
 */
proto.clinical.results.service.SubmitRequest.prototype.setExternalEntityId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Stamp stamp = 4;
 * @return {!proto.clinical.results.service.Stamp}
 */
proto.clinical.results.service.SubmitRequest.prototype.getStamp = function() {
  return /** @type {!proto.clinical.results.service.Stamp} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.clinical.results.service.Stamp} value
 * @return {!proto.clinical.results.service.SubmitRequest} returns this
 */
proto.clinical.results.service.SubmitRequest.prototype.setStamp = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional clinical.apis.pwnhealth.Order order = 5;
 * @return {?proto.clinical.apis.pwnhealth.Order}
 */
proto.clinical.results.service.SubmitRequest.prototype.getOrder = function() {
  return /** @type{?proto.clinical.apis.pwnhealth.Order} */ (
    jspb.Message.getWrapperField(this, pwnhealth_pb.Order, 5));
};


/**
 * @param {?proto.clinical.apis.pwnhealth.Order|undefined} value
 * @return {!proto.clinical.results.service.SubmitRequest} returns this
*/
proto.clinical.results.service.SubmitRequest.prototype.setOrder = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.SubmitRequest} returns this
 */
proto.clinical.results.service.SubmitRequest.prototype.clearOrder = function() {
  return this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.SubmitRequest.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.SubmitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.SubmitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.SubmitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.SubmitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.SubmitResponse}
 */
proto.clinical.results.service.SubmitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.SubmitResponse;
  return proto.clinical.results.service.SubmitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.SubmitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.SubmitResponse}
 */
proto.clinical.results.service.SubmitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.SubmitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.SubmitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.SubmitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.SubmitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clinical.results.service.RetrySubmissionsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.RetrySubmissionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.RetrySubmissionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.RetrySubmissionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.RetrySubmissionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.RetrySubmissionsRequest}
 */
proto.clinical.results.service.RetrySubmissionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.RetrySubmissionsRequest;
  return proto.clinical.results.service.RetrySubmissionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.RetrySubmissionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.RetrySubmissionsRequest}
 */
proto.clinical.results.service.RetrySubmissionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setReportIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.RetrySubmissionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.RetrySubmissionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.RetrySubmissionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.RetrySubmissionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 report_ids = 1;
 * @return {!Array<number>}
 */
proto.clinical.results.service.RetrySubmissionsRequest.prototype.getReportIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.clinical.results.service.RetrySubmissionsRequest} returns this
 */
proto.clinical.results.service.RetrySubmissionsRequest.prototype.setReportIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.clinical.results.service.RetrySubmissionsRequest} returns this
 */
proto.clinical.results.service.RetrySubmissionsRequest.prototype.addReportIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clinical.results.service.RetrySubmissionsRequest} returns this
 */
proto.clinical.results.service.RetrySubmissionsRequest.prototype.clearReportIdsList = function() {
  return this.setReportIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clinical.results.service.RetrySubmissionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.RetrySubmissionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.RetrySubmissionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.RetrySubmissionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.RetrySubmissionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    externalEntityNamesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.RetrySubmissionsResponse}
 */
proto.clinical.results.service.RetrySubmissionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.RetrySubmissionsResponse;
  return proto.clinical.results.service.RetrySubmissionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.RetrySubmissionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.RetrySubmissionsResponse}
 */
proto.clinical.results.service.RetrySubmissionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addExternalEntityNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.RetrySubmissionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.RetrySubmissionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.RetrySubmissionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.RetrySubmissionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExternalEntityNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string external_entity_names = 1;
 * @return {!Array<string>}
 */
proto.clinical.results.service.RetrySubmissionsResponse.prototype.getExternalEntityNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.clinical.results.service.RetrySubmissionsResponse} returns this
 */
proto.clinical.results.service.RetrySubmissionsResponse.prototype.setExternalEntityNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.clinical.results.service.RetrySubmissionsResponse} returns this
 */
proto.clinical.results.service.RetrySubmissionsResponse.prototype.addExternalEntityNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clinical.results.service.RetrySubmissionsResponse} returns this
 */
proto.clinical.results.service.RetrySubmissionsResponse.prototype.clearExternalEntityNamesList = function() {
  return this.setExternalEntityNamesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.clinical.results.service.SetSubmissionStatusRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.SetSubmissionStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.SetSubmissionStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.SetSubmissionStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.SetSubmissionStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    externalEntityNamesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.SetSubmissionStatusRequest}
 */
proto.clinical.results.service.SetSubmissionStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.SetSubmissionStatusRequest;
  return proto.clinical.results.service.SetSubmissionStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.SetSubmissionStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.SetSubmissionStatusRequest}
 */
proto.clinical.results.service.SetSubmissionStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReportId(value);
      break;
    case 2:
      var value = /** @type {!proto.clinical.results.service.SubmissionStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addExternalEntityNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.SetSubmissionStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.SetSubmissionStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.SetSubmissionStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.SetSubmissionStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getExternalEntityNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional int32 report_id = 1;
 * @return {number}
 */
proto.clinical.results.service.SetSubmissionStatusRequest.prototype.getReportId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.SetSubmissionStatusRequest} returns this
 */
proto.clinical.results.service.SetSubmissionStatusRequest.prototype.setReportId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SubmissionStatus status = 2;
 * @return {!proto.clinical.results.service.SubmissionStatus}
 */
proto.clinical.results.service.SetSubmissionStatusRequest.prototype.getStatus = function() {
  return /** @type {!proto.clinical.results.service.SubmissionStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.clinical.results.service.SubmissionStatus} value
 * @return {!proto.clinical.results.service.SetSubmissionStatusRequest} returns this
 */
proto.clinical.results.service.SetSubmissionStatusRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated string external_entity_names = 3;
 * @return {!Array<string>}
 */
proto.clinical.results.service.SetSubmissionStatusRequest.prototype.getExternalEntityNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.clinical.results.service.SetSubmissionStatusRequest} returns this
 */
proto.clinical.results.service.SetSubmissionStatusRequest.prototype.setExternalEntityNamesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.clinical.results.service.SetSubmissionStatusRequest} returns this
 */
proto.clinical.results.service.SetSubmissionStatusRequest.prototype.addExternalEntityNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.clinical.results.service.SetSubmissionStatusRequest} returns this
 */
proto.clinical.results.service.SetSubmissionStatusRequest.prototype.clearExternalEntityNamesList = function() {
  return this.setExternalEntityNamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.SetSubmissionStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.SetSubmissionStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.SetSubmissionStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.SetSubmissionStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.SetSubmissionStatusResponse}
 */
proto.clinical.results.service.SetSubmissionStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.SetSubmissionStatusResponse;
  return proto.clinical.results.service.SetSubmissionStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.SetSubmissionStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.SetSubmissionStatusResponse}
 */
proto.clinical.results.service.SetSubmissionStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.SetSubmissionStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.SetSubmissionStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.SetSubmissionStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.SetSubmissionStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.WriteReportPdfRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.WriteReportPdfRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.WriteReportPdfRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: (f = msg.getOrder()) && pwnhealth_pb.Order.toObject(includeInstance, f),
    kitId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    testResult: jspb.Message.getFieldWithDefault(msg, 3, 0),
    assay: jspb.Message.getFieldWithDefault(msg, 4, 0),
    collectedAt: (f = msg.getCollectedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    reportedAt: (f = msg.getReportedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    comment: jspb.Message.getFieldWithDefault(msg, 7, ""),
    stamp: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.WriteReportPdfRequest}
 */
proto.clinical.results.service.WriteReportPdfRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.WriteReportPdfRequest;
  return proto.clinical.results.service.WriteReportPdfRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.WriteReportPdfRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.WriteReportPdfRequest}
 */
proto.clinical.results.service.WriteReportPdfRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new pwnhealth_pb.Order;
      reader.readMessage(value,pwnhealth_pb.Order.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKitId(value);
      break;
    case 3:
      var value = /** @type {!proto.clinical.results.service.TestResult} */ (reader.readEnum());
      msg.setTestResult(value);
      break;
    case 4:
      var value = /** @type {!proto.clinical.results.service.Assay} */ (reader.readEnum());
      msg.setAssay(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCollectedAt(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setReportedAt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 8:
      var value = /** @type {!proto.clinical.results.service.Stamp} */ (reader.readEnum());
      msg.setStamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.WriteReportPdfRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.WriteReportPdfRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.WriteReportPdfRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      pwnhealth_pb.Order.serializeBinaryToWriter
    );
  }
  f = message.getKitId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTestResult();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAssay();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCollectedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getReportedAt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getStamp();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * optional clinical.apis.pwnhealth.Order order = 1;
 * @return {?proto.clinical.apis.pwnhealth.Order}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.getOrder = function() {
  return /** @type{?proto.clinical.apis.pwnhealth.Order} */ (
    jspb.Message.getWrapperField(this, pwnhealth_pb.Order, 1));
};


/**
 * @param {?proto.clinical.apis.pwnhealth.Order|undefined} value
 * @return {!proto.clinical.results.service.WriteReportPdfRequest} returns this
*/
proto.clinical.results.service.WriteReportPdfRequest.prototype.setOrder = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.WriteReportPdfRequest} returns this
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.clearOrder = function() {
  return this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string kit_id = 2;
 * @return {string}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.getKitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.WriteReportPdfRequest} returns this
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.setKitId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TestResult test_result = 3;
 * @return {!proto.clinical.results.service.TestResult}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.getTestResult = function() {
  return /** @type {!proto.clinical.results.service.TestResult} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.clinical.results.service.TestResult} value
 * @return {!proto.clinical.results.service.WriteReportPdfRequest} returns this
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.setTestResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Assay assay = 4;
 * @return {!proto.clinical.results.service.Assay}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.getAssay = function() {
  return /** @type {!proto.clinical.results.service.Assay} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.clinical.results.service.Assay} value
 * @return {!proto.clinical.results.service.WriteReportPdfRequest} returns this
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.setAssay = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp collected_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.getCollectedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.clinical.results.service.WriteReportPdfRequest} returns this
*/
proto.clinical.results.service.WriteReportPdfRequest.prototype.setCollectedAt = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.WriteReportPdfRequest} returns this
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.clearCollectedAt = function() {
  return this.setCollectedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.hasCollectedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp reported_at = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.getReportedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.clinical.results.service.WriteReportPdfRequest} returns this
*/
proto.clinical.results.service.WriteReportPdfRequest.prototype.setReportedAt = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.WriteReportPdfRequest} returns this
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.clearReportedAt = function() {
  return this.setReportedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.hasReportedAt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string comment = 7;
 * @return {string}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.WriteReportPdfRequest} returns this
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional Stamp stamp = 8;
 * @return {!proto.clinical.results.service.Stamp}
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.getStamp = function() {
  return /** @type {!proto.clinical.results.service.Stamp} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.clinical.results.service.Stamp} value
 * @return {!proto.clinical.results.service.WriteReportPdfRequest} returns this
 */
proto.clinical.results.service.WriteReportPdfRequest.prototype.setStamp = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.WriteReportPdfResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.WriteReportPdfResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.WriteReportPdfResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.WriteReportPdfResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gcsPath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.WriteReportPdfResponse}
 */
proto.clinical.results.service.WriteReportPdfResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.WriteReportPdfResponse;
  return proto.clinical.results.service.WriteReportPdfResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.WriteReportPdfResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.WriteReportPdfResponse}
 */
proto.clinical.results.service.WriteReportPdfResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGcsPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.WriteReportPdfResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.WriteReportPdfResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.WriteReportPdfResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.WriteReportPdfResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGcsPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string gcs_path = 1;
 * @return {string}
 */
proto.clinical.results.service.WriteReportPdfResponse.prototype.getGcsPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.WriteReportPdfResponse} returns this
 */
proto.clinical.results.service.WriteReportPdfResponse.prototype.setGcsPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.ResubmitAmendedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.ResubmitAmendedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.ResubmitAmendedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.ResubmitAmendedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    comment: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.ResubmitAmendedRequest}
 */
proto.clinical.results.service.ResubmitAmendedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.ResubmitAmendedRequest;
  return proto.clinical.results.service.ResubmitAmendedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.ResubmitAmendedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.ResubmitAmendedRequest}
 */
proto.clinical.results.service.ResubmitAmendedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReportId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.ResubmitAmendedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.ResubmitAmendedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.ResubmitAmendedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.ResubmitAmendedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 report_id = 1;
 * @return {number}
 */
proto.clinical.results.service.ResubmitAmendedRequest.prototype.getReportId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.clinical.results.service.ResubmitAmendedRequest} returns this
 */
proto.clinical.results.service.ResubmitAmendedRequest.prototype.setReportId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string comment = 2;
 * @return {string}
 */
proto.clinical.results.service.ResubmitAmendedRequest.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.clinical.results.service.ResubmitAmendedRequest} returns this
 */
proto.clinical.results.service.ResubmitAmendedRequest.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.clinical.results.service.ResubmitAmendedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.clinical.results.service.ResubmitAmendedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.clinical.results.service.ResubmitAmendedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.ResubmitAmendedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.clinical.results.service.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.clinical.results.service.ResubmitAmendedResponse}
 */
proto.clinical.results.service.ResubmitAmendedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.clinical.results.service.ResubmitAmendedResponse;
  return proto.clinical.results.service.ResubmitAmendedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.clinical.results.service.ResubmitAmendedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.clinical.results.service.ResubmitAmendedResponse}
 */
proto.clinical.results.service.ResubmitAmendedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.clinical.results.service.Result;
      reader.readMessage(value,proto.clinical.results.service.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.clinical.results.service.ResubmitAmendedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.clinical.results.service.ResubmitAmendedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.clinical.results.service.ResubmitAmendedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.clinical.results.service.ResubmitAmendedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.clinical.results.service.Result.serializeBinaryToWriter
    );
  }
};


/**
 * optional Result result = 1;
 * @return {?proto.clinical.results.service.Result}
 */
proto.clinical.results.service.ResubmitAmendedResponse.prototype.getResult = function() {
  return /** @type{?proto.clinical.results.service.Result} */ (
    jspb.Message.getWrapperField(this, proto.clinical.results.service.Result, 1));
};


/**
 * @param {?proto.clinical.results.service.Result|undefined} value
 * @return {!proto.clinical.results.service.ResubmitAmendedResponse} returns this
*/
proto.clinical.results.service.ResubmitAmendedResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.clinical.results.service.ResubmitAmendedResponse} returns this
 */
proto.clinical.results.service.ResubmitAmendedResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.clinical.results.service.ResubmitAmendedResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.clinical.results.service.ApprovalStatus = {
  STATUS_UNSPECIFIED: 0,
  STATUS_APPROVED: 1,
  STATUS_PENDING: 2,
  STATUS_REJECTED: 3
};

/**
 * @enum {number}
 */
proto.clinical.results.service.TestValidity = {
  VALIDITY_UNSPECIFIED: 0,
  VALIDITY_VALID: 1,
  VALIDITY_INVALID: 2
};

/**
 * @enum {number}
 */
proto.clinical.results.service.TestResult = {
  RESULT_UNSPECIFIED: 0,
  RESULT_POSITIVE: 1,
  RESULT_NEGATIVE: 2,
  RESULT_INCONCLUSIVE: 3,
  RESULT_NA: 4,
  RESULT_TEST_NOT_PERFORMED: 5,
  RESULT_NEGATIVE_IN_POOL: 6
};

/**
 * @enum {number}
 */
proto.clinical.results.service.SubmissionStatus = {
  SUBMISSION_UNSPECIFIED: 0,
  SUBMISSION_IN_PROGRESS: 1,
  SUBMISSION_SUCCEEDED: 2,
  SUBMISSION_FAILED: 3
};

/**
 * @enum {number}
 */
proto.clinical.results.service.Assay = {
  ASSAY_UNSPECIFIED: 0,
  ASSAY_96_WELL_TAQPATH_RT_PCR_COVID_19: 1,
  ASSAY_384_WELL_TAQPATH_RT_PCR_SINGLE_SAMPLE_COVID_19: 2,
  ASSAY_384_WELL_TAQPATH_RT_PCR_POOLING_COVID_19: 3,
  ASSAY_BD_MAX: 4,
  ASSAY_ANTI_SARS_COV_2_SEROLOGY: 5
};

/**
 * @enum {number}
 */
proto.clinical.results.service.Device = {
  DEVICE_UNSPECIFIED: 0,
  DEVICE_THERMO_FISHER_QS5_THERMO_FISHER_SCIENTIFIC_CORPORATION_MNI: 1,
  DEVICE_THERMO_FISHER_7500_THERMO_FISHER_SCIENTIFIC_CORPORATION_MNI: 2,
  DEVICE_BD_MAX_SYSTEM_BD_MOLECULAR_DIAGNOSTICS: 3
};

/**
 * @enum {number}
 */
proto.clinical.results.service.Stamp = {
  STAMP_UNSPECIFIED: 0,
  STAMP_AMENDED: 1,
  STAMP_CORRECTED: 2
};

/**
 * @enum {number}
 */
proto.clinical.results.service.ErrorCode = {
  ERROR_UNSPECIFIED: 0,
  ERROR_EXISTING_NONREJECTED_ON_RESUBMISSION: 1,
  ERROR_EXISTING_UNSUBMITTED_NONREJECTED_ON_RESUBMISSION: 2,
  ERROR_NO_EXISTING_SUBMISSION_ON_RESUBMISSION: 3,
  ERROR_NO_STAMP_ON_RESUBMISSION: 4
};


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `dbField`.
 * @type {!jspb.ExtensionFieldInfo<string>}
 */
proto.clinical.results.service.dbField = new jspb.ExtensionFieldInfo(
    158849701,
    {dbField: 0},
    null,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         null),
    0);

google_protobuf_descriptor_pb.EnumValueOptions.extensionsBinary[158849701] = new jspb.ExtensionFieldBinaryInfo(
    proto.clinical.results.service.dbField,
    jspb.BinaryReader.prototype.readString,
    jspb.BinaryWriter.prototype.writeString,
    undefined,
    undefined,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.EnumValueOptions.extensions[158849701] = proto.clinical.results.service.dbField;

goog.object.extend(exports, proto.clinical.results.service);
